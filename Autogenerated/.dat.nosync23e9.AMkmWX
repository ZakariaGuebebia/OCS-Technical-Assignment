//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Primary`.
    static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "Primary")
    /// Color `orange`.
    static let orange = Rswift.ColorResource(bundle: R.hostingBundle, name: "orange")
    
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `OCSLoader.json`.
    static let ocsLoaderJson = Rswift.FileResource(bundle: R.hostingBundle, name: "OCSLoader", pathExtension: "json")
    /// Resource file `Search.json`.
    static let searchJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Search", pathExtension: "json")
    
    /// `bundle.url(forResource: "OCSLoader", withExtension: "json")`
    static func ocsLoaderJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ocsLoaderJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Search", withExtension: "json")`
    static func searchJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.searchJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `ic-OCS_logo`.
    static let icOCS_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-OCS_logo")
    /// Image `ic-placeHolder`.
    static let icPlaceHolder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-placeHolder")
    /// Image `ic-play-button`.
    static let icPlayButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-play-button")
    /// Image `ic-result-not-found`.
    static let icResultNotFound = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-result-not-found")
    
    /// `UIImage(named: "ic-OCS_logo", bundle: ..., traitCollection: ...)`
    static func icOCS_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icOCS_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-placeHolder", bundle: ..., traitCollection: ...)`
    static func icPlaceHolder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icPlaceHolder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-play-button", bundle: ..., traitCollection: ...)`
    static func icPlayButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icPlayButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-result-not-found", bundle: ..., traitCollection: ...)`
    static func icResultNotFound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icResultNotFound, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `SerieCollectionViewCell`.
    static let serieCollectionViewCell = _R.nib._SerieCollectionViewCell()
    
    /// `UINib(name: "SerieCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.serieCollectionViewCell) instead")
    static func serieCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serieCollectionViewCell)
    }
    
    static func serieCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SerieCollectionViewCell? {
      return R.nib.serieCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SerieCollectionViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SerieCollectionViewCell`.
    static let serieCollectionViewCell: Rswift.ReuseIdentifier<SerieCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SerieCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Details`.
    static let details = _R.storyboard.details()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Details", bundle: ...)`
    static func details(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.details)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }
    
    /// This `R.string.ocS` struct is generated, and contains static references to 11 localization keys.
    struct ocS {
      /// en translation: Error
      /// 
      /// Locales: en, fr
      static let ioN2goAppAlertError = Rswift.StringResource(key: "io.n2go.app.Alert.Error", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, fr
      static let ioN2goAppOk = Rswift.StringResource(key: "io.n2go.app.ok", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Oops sorry - Cannot communicate or retrieve data from backend system
      /// 
      /// Locales: en, fr
      static let ioN2goAppError404 = Rswift.StringResource(key: "io.n2go.app.Error.404", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Oops sorry - Invalid input
      /// 
      /// Locales: en, fr
      static let ioN2goAppError405 = Rswift.StringResource(key: "io.n2go.app.Error.405", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Oops sorry - Something went wrong, please try again.
      /// 
      /// Locales: en, fr
      static let ioN2goAppErrorUnexpected = Rswift.StringResource(key: "io.n2go.app.Error.unexpected", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Oops sorry - There is a problem on the server side
      /// 
      /// Locales: en, fr
      static let ioN2goAppError5xx = Rswift.StringResource(key: "io.n2go.app.Error.5xx", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Oops sorry - There is an error with the data supplied into our API
      /// 
      /// Locales: en, fr
      static let ioN2goAppError400 = Rswift.StringResource(key: "io.n2go.app.Error.400", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Oops sorry - You are not allowed to perform this action
      /// 
      /// Locales: en, fr
      static let ioN2goAppError403 = Rswift.StringResource(key: "io.n2go.app.Error.403", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Oops sorry - You are not authorized to perform this action. Please login and retry
      /// 
      /// Locales: en, fr
      static let ioN2goAppError401 = Rswift.StringResource(key: "io.n2go.app.Error.401", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please check your Internet Connection.
      /// 
      /// Locales: en, fr
      static let ioN2goAppErrorNetwork = Rswift.StringResource(key: "io.n2go.app.Error.network", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: film, serie, magazine...
      /// 
      /// Locales: en, fr
      static let comOCSSearch = Rswift.StringResource(key: "com.OCS.search", tableName: "OCS", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      
      /// en translation: Error
      /// 
      /// Locales: en, fr
      static func ioN2goAppAlertError(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Alert.Error", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, fr
      static func ioN2goAppOk(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.ok", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops sorry - Cannot communicate or retrieve data from backend system
      /// 
      /// Locales: en, fr
      static func ioN2goAppError404(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Error.404", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops sorry - Invalid input
      /// 
      /// Locales: en, fr
      static func ioN2goAppError405(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Error.405", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops sorry - Something went wrong, please try again.
      /// 
      /// Locales: en, fr
      static func ioN2goAppErrorUnexpected(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Error.unexpected", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops sorry - There is a problem on the server side
      /// 
      /// Locales: en, fr
      static func ioN2goAppError5xx(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Error.5xx", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops sorry - There is an error with the data supplied into our API
      /// 
      /// Locales: en, fr
      static func ioN2goAppError400(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Error.400", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops sorry - You are not allowed to perform this action
      /// 
      /// Locales: en, fr
      static func ioN2goAppError403(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Error.403", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oops sorry - You are not authorized to perform this action. Please login and retry
      /// 
      /// Locales: en, fr
      static func ioN2goAppError401(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Error.401", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please check your Internet Connection.
      /// 
      /// Locales: en, fr
      static func ioN2goAppErrorNetwork(_: Void = ()) -> String {
        return NSLocalizedString("io.n2go.app.Error.network", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: film, serie, magazine...
      /// 
      /// Locales: en, fr
      static func comOCSSearch(_: Void = ()) -> String {
        return NSLocalizedString("com.OCS.search", tableName: "OCS", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _SerieCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SerieCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SerieCollectionViewCell"
      let name = "SerieCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SerieCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SerieCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try details.validate()
      try launchScreen.validate()
      try main.validate()
    }
    
    struct details: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailsViewController = StoryboardViewControllerResource<DetailsViewController>(identifier: "DetailsViewController")
      let name = "Details"
      
      func detailsViewController(_: Void = ()) -> DetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-play-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-play-button' is used in storyboard 'Details', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.details().detailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailsViewController' could not be loaded from storyboard 'Details' as 'DetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-OCS_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-OCS_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "Primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Primary' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      
      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-OCS_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-OCS_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-result-not-found", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-result-not-found' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
